buildscript {
  repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
  }
  dependencies {
    classpath gradlePlugins.android
    classpath gradlePlugins.dexcount
    classpath gradlePlugins.fabric
  }
}

apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'

repositories {
  maven { url 'https://maven.fabric.io/public' }
  maven { url "https://jitpack.io" }
  maven { name 'glide-snapshot'; url 'http://oss.sonatype.org/content/repositories/snapshots' }
}

//For some reason this needs to be placed below the dependencies in order for gms services to work..
apply plugin: 'com.google.gms.google-services'

@Nullable
def getProperties(String fileName) {
  final def Properties properties = new Properties()
  def file = file(fileName)
  if (file.exists()) {
    file.withInputStream { stream -> properties.load(stream) }
  }
  return properties
}

def getProperty(@Nullable Properties properties, String name) {
  return properties.getProperty(name) ?: "$name missing";
}

android {

  dexOptions {
    jumboMode = true
  }

  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  defaultConfig {
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk

    versionName versions.name
    versionCode gitInfo().commitCount

    resConfigs "en", "zh-rCN", "ja", "fr", "de", "ko", "it", "ru", "nl", "tr", "pl", "ro", "hu",
        "uk", "bg-rBG", "en-rGB", "vi", "pt-rBR", "es", "en-rNZ", "zh-rTW", "es-rES", "ca", "hr",
        "en-rAU", "eu-rES"

    renderscriptTargetApi 23

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    buildConfigField "boolean", "MULTIDEX_ENABLED", "false"

    // This API key is provided for convenience. Please go to https://www.last.fm/api/account/create and create your own.
    buildConfigField("String", "LASTFM_API_KEY",
        "\"${getProperty(getProperties('../public.properties'), 'LASTFM_API_KEY')}\"")
  }

  signingConfigs {
    release {
      keyAlias shuttle_prodKeyAlias
      keyPassword prodKeyPassword
      storeFile file(prodStoreFile)
      storePassword prodStorePassword
    }
  }

  buildTypes {

    debug {
      applicationIdSuffix ".debug"
    }

    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')
      signingConfig signingConfigs.release

      buildConfigField("String", "LASTFM_API_KEY",
          "\"${getProperty(getProperties('../private.properties'), 'LASTFM_API_KEY')}\"")
    }

    applicationVariants.all { variant ->

      if (variant.buildType.name.contains('release')) {
        variant.outputs.each { output ->
          def apk = output.outputFile;
          def newName = "shuttle-" + variant.baseName.replace("-release", "") +
              "-v" +
              defaultConfig.versionName +
              ".apk";
          output.outputFile = new File(apk.parentFile, newName);
        }

        //Reveal in explorer/finder
        variant.assemble.doLast {
          def path = null;
          variant.outputs.each { output ->
            path = output.outputFile

            //Delete the unaligned apk file
            File unaligned = output.packageApplication.outputFile;
            File aligned = output.outputFile
            if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
              unaligned.delete()
            }
          }

          exec {
            if (System.properties['os.name'].toLowerCase().contains('mac os x')) {
              ['open', '-R', path].execute()
            } else if (System.properties['os.name'].toLowerCase().contains('windows')) {
              ['explorer', '/select,', path].execute()
            }
          }
        }
      }
    }
  }

  //Ignore useless variants, such as devRelease.
  variantFilter { variant ->

    def names = variant.flavors*.name
    def buildTypes = variant.buildType*.name

    def debugFilters = ["paid", "free", 'amazonPaid', "amazonFree"];
    def relFilters = ["dev", "devPre21"];

    def filter = { name -> names.contains(name) }
    def debugIgnore = buildTypes.contains("debug") && debugFilters.stream().anyMatch(filter)
    def releaseIgnore = buildTypes.contains("release") && relFilters.stream().anyMatch(filter)

    setIgnore(debugIgnore || releaseIgnore)
  }

  // Used to enable Java8 features (via RetroLambda)
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  productFlavors {

    dev {
      applicationId "im.ene.shuttle"

      //Enable multiDex for debug builds, since they don't use proguard
      multiDexEnabled true
      minSdkVersion 21
    }

    devPre21 {
      applicationId "im.ene.shuttle"

      //Enable multiDex for debug builds, since they don't use proguard
      multiDexEnabled true
      // Indicates that we're using Multidex, so we can set it up in our Application.onCreate()
      buildConfigField "boolean", "MULTIDEX_ENABLED", "true"
    }

    paid.applicationId "im.ene.shuttle.pro"

    free.applicationId "im.ene.shuttle"

    amazonPaid.applicationId "im.ene.shuttle.pro"

    amazonFree.applicationId "im.ene.shuttle"
  }

  sourceSets {
    main.aidl.srcDirs = ['src/main/java']

    dev.res.srcDirs = ['src/paid/res']
    dev.java.srcDirs = ['src/paid/java']

    devPre21.res.srcDirs = ['src/paid/res']
    devPre21.java.srcDirs = ['src/paid/java']

    paid.res.srcDirs = ['src/paid/res']
    paid.java.srcDirs = ['src/paid/java']

    free.manifest.srcFile 'src/free/AndroidManifest.xml'
    free.res.srcDirs = ['src/free/res']
    free.java.srcDirs = ['src/free/java']

    amazonPaid.res.srcDirs = ['src/paid/res']
    amazonPaid.java.srcDirs = ['src/paid/java']

    amazonFree.res.srcDirs = ['src/free/res']
    amazonFree.java.srcDirs = ['src/free/java']
  }

  lintOptions {
    ignore 'ExtraTranslation', 'MissingTranslation'
    abortOnError false
  }
}

dependencies {
  compile fileTree(include: '*.jar', dir: 'libs')

  // //////////////////////////////////////////////////////////////////////////
  // Google libs
  // /////////////////////////////////////////////////////////////////////////

  compile libs.cardView
  compile libs.design
  compile libs.palette
  compile libs.prefCompat
  compile libs.recyclerView
  compile libs.supportv4
  compile libs.firebaseCore
  compile libs.constraintLayout

  // //////////////////////////////////////////////////////////////////////////
  // Square libs
  // /////////////////////////////////////////////////////////////////////////

  compile libs.okio
  compile libs.okhttp
  compile libs.retrofit
  compile libs.retrofitGson
  compile libs.sqlBrite
  debugCompile libs.haha
  debugCompile libs.leakCanaryDebug
  releaseCompile libs.leakCanaryRel

  // //////////////////////////////////////////////////////////////////////////
  // External libs
  // /////////////////////////////////////////////////////////////////////////

  retrolambdaConfig libs.lambdaBackport
  compile libs.ccl
  compile libs.nanoHttp
  compile libs.dashClockApi
  compile libs.fastScroll
  compile libs.glide
  compile libs.glideOkhttp
  compile libs.glidePalette
  compile libs.multiSelViewHolder
  compile libs.permiso
  compile libs.rxAndroid
  compile libs.rxBindings
  compile libs.rxBindingsAppCompat
  compile libs.rxImageSel
  compile libs.rxJava
  compile libs.rxRelay
  compile libs.slidingUpPanel
  compile libs.streams
  compile(libs.crashlytics) {
    transitive = true;
  }
  compile(libs.materialDialogs) {
    transitive = true;
  }

  // //////////////////////////////////////////////////////////////////////////
  // Multidex (Only used in non-proguard pre-21 builds)
  // /////////////////////////////////////////////////////////////////////////
  compile libs.multiDex

  // //////////////////////////////////////////////////////////////////////////
  // Testing
  // /////////////////////////////////////////////////////////////////////////

  testCompile libs.junit
  androidTestCompile(libs.espresso) {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
}

def gitInfo() {
  def commitCount = 0
  def revision = "(unknown revision)"
  try {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'rev-list', '--all', '--count'
      standardOutput stdout
    }
    commitCount = stdout.toString().trim().toInteger()
    stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'rev-list', 'HEAD', '-n', '1'
      standardOutput stdout
    }
    revision = stdout.toString().trim()
  } catch (error) {
    println "Error: ${error}"
  }
  return [commitCount: commitCount, revision: revision]
}

//Fix an issue where launcher shortcuts don't use the correct package name based on the build flavours.
def replaceInShortcuts(variant, fromString, toString) {
  def flavor = variant.productFlavors.get(0)
  def buildtype = variant.buildType
  def shortcutsFile = "$buildDir/intermediates/res/merged/${flavor.name}/${buildtype.name}/xml/shortcuts.xml"
  def file = new File(shortcutsFile);
  def updatedContent = file.getText('UTF-8').replaceAll(fromString, toString)
  file.write(updatedContent, 'UTF-8')
}

afterEvaluate {
  android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
      output.processResources.doFirst {
        replaceInShortcuts(variant, '\\{applicationId\\}', variant.applicationId)
      }
    }
  }
}

/**
 * ##########################################################################################
 *
 * The following is required to get Retrolambda running on Mac, as of April 5, 2016.
 *
 * @see <a href="https://gist.github.com/tiwiz/a2bd1f5249147e017730">Gist</a>
 *
 * ##########################################################################################
 */

/**
 * Get the path to java_home for the given java version
 * @param version the java version (i.e. "1.8")
 */
String getJavaHome(String version) {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine "/usr/libexec/java_home", "-v", version
    standardOutput = stdout;
  }
  return stdout.toString().trim()
}

/** Checks the OS and, if it's MacOsX, adds the java path to retroLambda. */
task configureRetrolambda {
  doLast {
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
      println("Adding retrolmbda")
      retrolambda {
        jdk System.getenv("JAVA8_HOME") ?: getJavaHome("1.8")
        oldJdk System.getenv("JAVA7_HOME") ?: getJavaHome("1.7")
      }
    }
  }
}
preBuild.dependsOn configureRetrolambda
